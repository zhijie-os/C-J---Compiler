Starting parse
Entering state 0
Stack now 0
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 11
Stack now 0 11
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 22
Stack now 0 11 22
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 28
Stack now 0 11 22 28
Reducing stack by rule 26 (line 68):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm mainfunctiondeclarator ()
Entering state 15
Stack now 0 15
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 15 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 15 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 15 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 15 23 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 15 23 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 15 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 15 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 15 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 15 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 15 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 15 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 15 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 15 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 15 23 39 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 15 23 39 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 15 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 15 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 15 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 15 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 15 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 15 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 15 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 25
Stack now 0 15 25
Reducing stack by rule 25 (line 65):
   $1 = nterm mainfunctiondeclarator ()
   $2 = nterm block ()
-> $$ = nterm mainfunctiondeclaration ()
Entering state 14
Stack now 0 14
Reducing stack by rule 14 (line 38):
   $1 = nterm mainfunctiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 9
Stack now 0 9
Reducing stack by rule 10 (line 32):
   $1 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token BOOLEAN ()
Shifting token BOOLEAN ()
Entering state 1
Stack now 0 8 1
Reducing stack by rule 8 (line 28):
   $1 = token BOOLEAN ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 31 73 102 123 23 37 77
Reading a token
Next token is token FALSE ()
Shifting token FALSE ()
Entering state 53
Stack now 0 8 13 23 31 73 102 123 23 37 77 53
Reducing stack by rule 7 (line 25):
   $1 = token FALSE ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 31 73 102 123 23 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 31 73 102 123 23 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 31 73 102 123 23 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 31 73 102 123 23 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 31 73 102 123 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 102 123 23 39 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 39 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 31 73 102 123 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 31 73 102 123 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 31 73 102 123 127
Reading a token
Next token is token RETURN ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 30 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 30 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 30 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 30 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 30 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token VOID ()
Shifting token VOID ()
Entering state 4
Stack now 0 8 4
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 16
Stack now 0 8 4 16
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 4 16 26
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 4 16 26 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 46
Stack now 0 8 4 16 26 46
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 16 26 46 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 81
Stack now 0 8 4 16 26 46 81
Reducing stack by rule 24 (line 62):
   $1 = nterm type ()
   $2 = nterm identifier ()
-> $$ = nterm formalparameter ()
Entering state 48
Stack now 0 8 4 16 26 48
Reducing stack by rule 22 (line 58):
   $1 = nterm formalparameter ()
-> $$ = nterm formalparameterlist ()
Entering state 47
Stack now 0 8 4 16 26 47
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 82
Stack now 0 8 4 16 26 47 82
Reducing stack by rule 20 (line 54):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm formalparameterlist ()
   $4 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 17
Stack now 0 8 4 17
Reducing stack by rule 19 (line 51):
   $1 = token VOID ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 31 73 102 123 23 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 31 73 102 123 23 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 31 73 102 123 23 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 31 73 102 123 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 31 73 102 123 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 31 73 102 123 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 39 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 31 73 102 123 127
Reading a token
Next token is token ID ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token TRUE ()
Shifting token TRUE ()
Entering state 52
Stack now 0 8 13 23 39 37 77 52
Reducing stack by rule 6 (line 24):
   $1 = token TRUE ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token BOOLEAN ()
Shifting token BOOLEAN ()
Entering state 1
Stack now 0 8 1
Reducing stack by rule 8 (line 28):
   $1 = token BOOLEAN ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 31 73 102 123 127
Reading a token
Next token is token ID ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token TRUE ()
Shifting token TRUE ()
Entering state 52
Stack now 0 8 13 23 39 37 77 52
Reducing stack by rule 6 (line 24):
   $1 = token TRUE ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 30 59 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 59 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 30 59 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 30 59 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 30 59 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 30 59 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 30 59 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 30 59 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 30 59 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 30 59 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 30 59 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 30 59 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 30 59 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 30 59 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 30 59 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 71
Stack now 0 8 13 23 39 30 71
Reducing stack by rule 76 (line 157):
   $1 = nterm assignment ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token VOID ()
Shifting token VOID ()
Entering state 4
Stack now 0 8 4
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 16
Stack now 0 8 4 16
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 4 16 26
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 4 16 26 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 46
Stack now 0 8 4 16 26 46
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 16 26 46 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 81
Stack now 0 8 4 16 26 46 81
Reducing stack by rule 24 (line 62):
   $1 = nterm type ()
   $2 = nterm identifier ()
-> $$ = nterm formalparameter ()
Entering state 48
Stack now 0 8 4 16 26 48
Reducing stack by rule 22 (line 58):
   $1 = nterm formalparameter ()
-> $$ = nterm formalparameterlist ()
Entering state 47
Stack now 0 8 4 16 26 47
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 82
Stack now 0 8 4 16 26 47 82
Reducing stack by rule 20 (line 54):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm formalparameterlist ()
   $4 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 17
Stack now 0 8 4 17
Reducing stack by rule 19 (line 51):
   $1 = token VOID ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 31 73 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 31 73 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 31 73 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 64
Reading a token
Next token is token NE ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 65
Next token is token NE ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 66
Next token is token NE ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 67
Next token is token NE ()
Shifting token NE ()
Entering state 97
Stack now 0 8 13 23 31 73 67 97
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 67 97 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 31 73 67 97 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 67 97 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 67 97 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 67 97 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 67 97 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 119
Stack now 0 8 13 23 31 73 67 97 119
Next token is token ')' ()
Reducing stack by rule 70 (line 143):
   $1 = nterm equalityexpression ()
   $2 = token NE ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 31 73 102 123 23 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 31 73 102 123 23 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 31 73 102 123 23 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 31 73 102 123 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 31 73 102 123 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 31 73 102 123 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 39 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 39 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 31 73 102 123 23 39 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 31 73 102 123 23 39 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 31 73 102 123 127
Reading a token
Next token is token ID ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token FALSE ()
Shifting token FALSE ()
Entering state 53
Stack now 0 8 13 23 39 37 77 53
Reducing stack by rule 7 (line 25):
   $1 = token FALSE ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 32
Stack now 0 8 13 23 39 32
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 74
Stack now 0 8 13 23 39 32 74
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 59 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 59 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59 76 59
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 59 76 59 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 59 76 59 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59 76 59 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 59 76 59 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 59 76 59 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 59 76 59 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 59 76 59 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 59 76 59 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 59 76 59 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 59 76 59 77 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 59 76 59 77 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 59 76 59 77 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 59 76 59 77 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 59 76 59 77 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 59 76 59 77 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 59 76 59 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 71
Stack now 0 8 13 23 39 32 74 59 76 71
Reducing stack by rule 76 (line 157):
   $1 = nterm assignment ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 59 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 59 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 59 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 59 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 103
Stack now 0 8 13 23 39 32 74 103
Next token is token ')' ()
Shifting token ')' ()
Entering state 124
Stack now 0 8 13 23 39 32 74 103 124
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 33
Stack now 0 8 13 23 39 32 74 103 124 33
Reducing stack by rule 34 (line 84):
   $1 = token ';' ()
-> $$ = nterm statement ()
Entering state 128
Stack now 0 8 13 23 39 32 74 103 124 128
Reducing stack by rule 41 (line 91):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token IF ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 59 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 59 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 59 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 59 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 59 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 59 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 59 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 59 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 59 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 59 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 59 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 59 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 59 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 59 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 31 73 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 23 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 23 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 23 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 32
Stack now 0 8 13 23 39 31 73 102 123 23 39 32
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 74
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 59 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 103
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103
Next token is token ')' ()
Shifting token ')' ()
Entering state 124
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 59
Reading a token
Next token is token '*' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64
Next token is token '*' ()
Shifting token '*' ()
Entering state 88
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 110
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64 88 110
Reducing stack by rule 57 (line 124):
   $1 = nterm multiplicativeexpression ()
   $2 = token '*' ()
   $3 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 64
Reading a token
Next token is token '+' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65
Next token is token '+' ()
Shifting token '+' ()
Entering state 92
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 55
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 59
Reading a token
Next token is token '-' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 64
Next token is token '-' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65
Next token is token '-' ()
Shifting token '-' ()
Entering state 91
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 113
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65 91 113
Next token is token ')' ()
Reducing stack by rule 62 (line 131):
   $1 = nterm additiveexpression ()
   $2 = token '-' ()
   $3 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 84
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 84
Next token is token ')' ()
Shifting token ')' ()
Entering state 109
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 55 84 109
Reducing stack by rule 45 (line 102):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 114
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65 92 114
Reading a token
Next token is token ';' ()
Reducing stack by rule 61 (line 130):
   $1 = nterm additiveexpression ()
   $2 = token '+' ()
   $3 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 128
Stack now 0 8 13 23 39 31 73 102 123 23 39 32 74 103 124 128
Reducing stack by rule 41 (line 91):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 31 73 102 123 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 31 73 102 123 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token ID ()
Reducing stack by rule 39 (line 89):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 39 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token BOOLEAN ()
Shifting token BOOLEAN ()
Entering state 1
Stack now 0 8 1
Reducing stack by rule 8 (line 28):
   $1 = token BOOLEAN ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 7 19 26 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 46
Stack now 0 8 7 19 26 46
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 19 26 46 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 81
Stack now 0 8 7 19 26 46 81
Reducing stack by rule 24 (line 62):
   $1 = nterm type ()
   $2 = nterm identifier ()
-> $$ = nterm formalparameter ()
Entering state 48
Stack now 0 8 7 19 26 48
Reducing stack by rule 22 (line 58):
   $1 = nterm formalparameter ()
-> $$ = nterm formalparameterlist ()
Entering state 47
Stack now 0 8 7 19 26 47
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 82
Stack now 0 8 7 19 26 47 82
Reducing stack by rule 20 (line 54):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm formalparameterlist ()
   $4 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 30 59
Reading a token
Next token is token GE ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 64
Next token is token GE ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 65
Next token is token GE ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 66
Next token is token GE ()
Shifting token GE ()
Entering state 94
Stack now 0 8 13 23 30 66 94
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 66 94 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 66 94 85
Reading a token
Next token is token AND ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 66 94 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 66 94 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 66 94 64
Next token is token AND ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 116
Stack now 0 8 13 23 30 66 94 116
Next token is token AND ()
Reducing stack by rule 67 (line 138):
   $1 = nterm relationalexpression ()
   $2 = token GE ()
   $3 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 66
Next token is token AND ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 67
Next token is token AND ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 30 68
Next token is token AND ()
Shifting token AND ()
Entering state 99
Stack now 0 8 13 23 30 68 99
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 68 99 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 68 99 85
Reading a token
Next token is token LE ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 68 99 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 68 99 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 68 99 64
Next token is token LE ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 68 99 65
Next token is token LE ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 68 99 66
Next token is token LE ()
Shifting token LE ()
Entering state 93
Stack now 0 8 13 23 30 68 99 66 93
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 68 99 66 93 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 68 99 66 93 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 68 99 66 93 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 68 99 66 93 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 68 99 66 93 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 115
Stack now 0 8 13 23 30 68 99 66 93 115
Next token is token ';' ()
Reducing stack by rule 66 (line 137):
   $1 = nterm relationalexpression ()
   $2 = token LE ()
   $3 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 68 99 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 121
Stack now 0 8 13 23 30 68 99 121
Next token is token ';' ()
Reducing stack by rule 72 (line 147):
   $1 = nterm conditionalandexpression ()
   $2 = token AND ()
   $3 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token BOOLEAN ()
Shifting token BOOLEAN ()
Entering state 1
Stack now 0 8 1
Reducing stack by rule 8 (line 28):
   $1 = token BOOLEAN ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 7 19 26 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 46
Stack now 0 8 7 19 26 46
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 19 26 46 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 81
Stack now 0 8 7 19 26 46 81
Reducing stack by rule 24 (line 62):
   $1 = nterm type ()
   $2 = nterm identifier ()
-> $$ = nterm formalparameter ()
Entering state 48
Stack now 0 8 7 19 26 48
Reducing stack by rule 22 (line 58):
   $1 = nterm formalparameter ()
-> $$ = nterm formalparameterlist ()
Entering state 47
Stack now 0 8 7 19 26 47
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 82
Stack now 0 8 7 19 26 47 82
Reducing stack by rule 20 (line 54):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm formalparameterlist ()
   $4 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 30 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 30 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 67 98 85
Reading a token
Next token is token OR ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 67 98 64
Next token is token OR ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 67 98 65
Next token is token OR ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 30 67 98 120
Next token is token OR ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 67
Next token is token OR ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 30 68
Next token is token OR ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 30 69
Next token is token OR ()
Shifting token OR ()
Entering state 100
Stack now 0 8 13 23 30 69 100
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 69 100 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 69 100 85
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 69 100 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 69 100 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 69 100 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 69 100 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 69 100 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 69 100 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 30 69 100 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 69 100 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 69 100 67 98 85
Reading a token
Next token is token OR ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 69 100 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 69 100 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 69 100 67 98 64
Next token is token OR ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 69 100 67 98 65
Next token is token OR ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 30 69 100 67 98 120
Next token is token OR ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 69 100 67
Next token is token OR ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 122
Stack now 0 8 13 23 30 69 100 122
Next token is token OR ()
Reducing stack by rule 74 (line 151):
   $1 = nterm conditionalorexpression ()
   $2 = token OR ()
   $3 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 30 69
Next token is token OR ()
Shifting token OR ()
Entering state 100
Stack now 0 8 13 23 30 69 100
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 69 100 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 69 100 85
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 69 100 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 69 100 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 69 100 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 69 100 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 30 69 100 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 69 100 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 30 69 100 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 30 69 100 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 30 69 100 67 98 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 30 69 100 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 30 69 100 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 30 69 100 67 98 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 30 69 100 67 98 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 30 69 100 67 98 120
Next token is token ';' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 30 69 100 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 122
Stack now 0 8 13 23 30 69 100 122
Next token is token ';' ()
Reducing stack by rule 74 (line 151):
   $1 = nterm conditionalorexpression ()
   $2 = token OR ()
   $3 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token VOID ()
Shifting token VOID ()
Entering state 4
Stack now 0 8 4
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 16
Stack now 0 8 4 16
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 4 16 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 4 16 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 17
Stack now 0 8 4 17
Reducing stack by rule 19 (line 51):
   $1 = token VOID ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 32
Stack now 0 8 13 23 39 32
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 74
Stack now 0 8 13 23 39 32 74
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 64
Reading a token
Next token is token NE ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 65
Next token is token NE ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 66
Next token is token NE ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token NE ()
Shifting token NE ()
Entering state 97
Stack now 0 8 13 23 39 32 74 67 97
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 67 97 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 67 97 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 67 97 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 67 97 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 67 97 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 67 97 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 119
Stack now 0 8 13 23 39 32 74 67 97 119
Next token is token ')' ()
Reducing stack by rule 70 (line 143):
   $1 = nterm equalityexpression ()
   $2 = token NE ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 103
Stack now 0 8 13 23 39 32 74 103
Next token is token ')' ()
Shifting token ')' ()
Entering state 124
Stack now 0 8 13 23 39 32 74 103 124
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 32 74 103 124 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 32 74 103 124 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 32 74 103 124 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 32 74 103 124 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 128
Stack now 0 8 13 23 39 32 74 103 124 128
Reducing stack by rule 41 (line 91):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 39 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 39 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 39 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 39 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 39 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 39 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 39 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 39 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 39 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 39 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 32
Stack now 0 8 13 23 39 32
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 74
Stack now 0 8 13 23 39 32 74
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 64
Reading a token
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 67 98 85
Reading a token
Next token is token OR ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 67 98 64
Next token is token OR ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 67 98 65
Next token is token OR ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 67 98 120
Next token is token OR ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token OR ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 68
Next token is token OR ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token OR ()
Shifting token OR ()
Entering state 100
Stack now 0 8 13 23 39 32 74 69 100
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 69 100 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 69 100 85
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 69 100 85 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 69 100 85 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 69 100 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 69 100 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 69 100 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 69 100 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 69 100 64
Reading a token
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 69 100 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 69 100 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 69 100 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 69 100 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 69 100 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 69 100 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 69 100 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 69 100 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 69 100 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 69 100 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 69 100 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 69 100 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 122
Stack now 0 8 13 23 39 32 74 69 100 122
Next token is token ')' ()
Reducing stack by rule 74 (line 151):
   $1 = nterm conditionalorexpression ()
   $2 = token OR ()
   $3 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 103
Stack now 0 8 13 23 39 32 74 103
Next token is token ')' ()
Shifting token ')' ()
Entering state 124
Stack now 0 8 13 23 39 32 74 103 124
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 32 74 103 124 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 71
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 71
Reducing stack by rule 76 (line 157):
   $1 = nterm assignment ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 32 74 103 124 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 32 74 103 124 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 59
Reading a token
Next token is token '+' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64
Next token is token '+' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65
Next token is token '+' ()
Shifting token '+' ()
Entering state 92
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 114
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65 92 114
Next token is token ';' ()
Reducing stack by rule 61 (line 130):
   $1 = nterm additiveexpression ()
   $2 = token '+' ()
   $3 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 130
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 59
Reading a token
Next token is token '-' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64
Next token is token '-' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65
Next token is token '-' ()
Shifting token '-' ()
Entering state 91
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 113
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65 91 113
Next token is token ';' ()
Reducing stack by rule 62 (line 131):
   $1 = nterm additiveexpression ()
   $2 = token '-' ()
   $3 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 131
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 131
Reducing stack by rule 40 (line 90):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 32 74 103 124 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 32 74 103 124 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 128
Stack now 0 8 13 23 39 32 74 103 124 128
Reducing stack by rule 41 (line 91):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 39 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 39 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 39 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 39 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 39 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 39 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 39 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 39 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 39 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 39 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 32
Stack now 0 8 13 23 39 32
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 74
Stack now 0 8 13 23 39 32 74
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 64
Reading a token
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 67 98 85
Reading a token
Next token is token OR ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 67 98 64
Next token is token OR ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 67 98 65
Next token is token OR ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 67 98 120
Next token is token OR ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 67
Next token is token OR ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 68
Next token is token OR ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token OR ()
Shifting token OR ()
Entering state 100
Stack now 0 8 13 23 39 32 74 69 100
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 69 100 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 69 100 85
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 69 100 85 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 69 100 85 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 69 100 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 69 100 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 69 100 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 69 100 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 69 100 64
Reading a token
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 69 100 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 69 100 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 69 100 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 69 100 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 69 100 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 69 100 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 69 100 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 69 100 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 69 100 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 69 100 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 69 100 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 69 100 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 122
Stack now 0 8 13 23 39 32 74 69 100 122
Next token is token ')' ()
Reducing stack by rule 74 (line 151):
   $1 = nterm conditionalorexpression ()
   $2 = token OR ()
   $3 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 103
Stack now 0 8 13 23 39 32 74 103
Next token is token ')' ()
Shifting token ')' ()
Entering state 124
Stack now 0 8 13 23 39 32 74 103 124
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 32 74 103 124 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 59 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 71
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 71
Reducing stack by rule 76 (line 157):
   $1 = nterm assignment ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 32 74 103 124 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 32 74 103 124 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 32 74 103 124 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 32 74 103 124 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 59
Reading a token
Next token is token '*' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64
Next token is token '*' ()
Shifting token '*' ()
Entering state 88
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64 88
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64 88 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64 88 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64 88 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 110
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64 88 110
Reducing stack by rule 57 (line 124):
   $1 = nterm multiplicativeexpression ()
   $2 = token '*' ()
   $3 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 130
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 59
Reading a token
Next token is token '/' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64
Next token is token '/' ()
Shifting token '/' ()
Entering state 89
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64 89
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64 89 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64 89 85
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64 89 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 111
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64 89 111
Reducing stack by rule 58 (line 125):
   $1 = nterm multiplicativeexpression ()
   $2 = token '/' ()
   $3 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 131
Stack now 0 8 13 23 39 32 74 103 124 23 39 31 73 102 123 127 130 131
Reducing stack by rule 40 (line 90):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 32 74 103 124 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 32 74 103 124 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 32 74 103 124 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 32 74 103 124 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 32 74 103 124 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 128
Stack now 0 8 13 23 39 32 74 103 124 128
Reducing stack by rule 41 (line 91):
   $1 = token WHILE ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 7 19 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 7 19 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 20
Stack now 0 8 7 20
Reducing stack by rule 18 (line 50):
   $1 = nterm type ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 13 23 39 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 35
Stack now 0 8 13 23 39 35
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 35 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 75
Stack now 0 8 13 23 39 35 75
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 13 23 39 35 75 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 36
Stack now 0 8 13 23 39 36
Reducing stack by rule 31 (line 79):
   $1 = nterm variabledeclaration ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 59
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 59 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 59 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 23 39 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 130
Stack now 0 8 13 23 39 31 73 102 123 127 130
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31 73 102 123 127 130 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77
Reading a token
Next token is token '-' ()
Shifting token '-' ()
Entering state 56
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 85
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 85 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 85 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 61
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 61
Reducing stack by rule 46 (line 103):
   $1 = nterm functioninvocation ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 86
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 56 86
Reducing stack by rule 53 (line 118):
   $1 = token '-' ()
   $2 = nterm unaryexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 130
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 31
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 73
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 59
Reading a token
Next token is token EQ ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 64
Next token is token EQ ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 65
Next token is token EQ ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 66
Next token is token EQ ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67
Next token is token EQ ()
Shifting token EQ ()
Entering state 98
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 85
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 85
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 120
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67 98 120
Next token is token ')' ()
Reducing stack by rule 69 (line 142):
   $1 = nterm equalityexpression ()
   $2 = token EQ ()
   $3 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 102
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102
Next token is token ')' ()
Shifting token ')' ()
Entering state 123
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 59
Reading a token
Next token is token ')' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 64
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 127
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 130
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76
Reading a token
Next token is token STRING_Y ()
Shifting token STRING_Y ()
Entering state 51
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 51
Reducing stack by rule 5 (line 23):
   $1 = token STRING_Y ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 64
Reading a token
Next token is token ')' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 65
Next token is token ')' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 66
Next token is token ')' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 67
Next token is token ')' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 68
Next token is token ')' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 69
Next token is token ')' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 106
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 106
Reducing stack by rule 47 (line 106):
   $1 = nterm expression ()
-> $$ = nterm argumentlist ()
Entering state 105
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 105
Next token is token ')' ()
Shifting token ')' ()
Entering state 125
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 37 76 105 125
Reducing stack by rule 49 (line 110):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = nterm argumentlist ()
   $4 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 37
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 76
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 37 76
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 104
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 37 76 104
Reducing stack by rule 50 (line 111):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functioninvocation ()
Entering state 43
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 43
Reducing stack by rule 43 (line 98):
   $1 = nterm functioninvocation ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 42
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 38
Reducing stack by rule 33 (line 83):
   $1 = nterm block ()
-> $$ = nterm statement ()
Entering state 131
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 31 73 102 123 127 130 131
Reducing stack by rule 40 (line 90):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm statement ()
Entering state 131
Stack now 0 8 13 23 39 31 73 102 123 127 130 31 73 102 123 127 130 131
Reducing stack by rule 40 (line 90):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm statement ()
Entering state 131
Stack now 0 8 13 23 39 31 73 102 123 127 130 131
Reducing stack by rule 40 (line 90):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 30
Stack now 0 8 13 23 39 30
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 30 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 30 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 30 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 30 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 30 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 30 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 30 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 30 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 30 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 30 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 70
Stack now 0 8 13 23 39 30 70
Reducing stack by rule 78 (line 163):
   $1 = nterm assignmentexpression ()
-> $$ = nterm expression ()
Entering state 72
Stack now 0 8 13 23 39 30 72
Next token is token ';' ()
Shifting token ';' ()
Entering state 101
Stack now 0 8 13 23 39 30 72 101
Reducing stack by rule 37 (line 87):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 8 2
Reducing stack by rule 9 (line 29):
   $1 = token INT ()
-> $$ = nterm type ()
Entering state 7
Stack now 0 8 7
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 7 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 19
Stack now 0 8 7 19
Reading a token
Next token is token ';' ()
Shifting token ';' ()
Entering state 27
Stack now 0 8 7 19 27
Reducing stack by rule 15 (line 41):
   $1 = nterm type ()
   $2 = nterm identifier ()
   $3 = token ';' ()
-> $$ = nterm variabledeclaration ()
Entering state 10
Stack now 0 8 10
Reducing stack by rule 12 (line 36):
   $1 = nterm variabledeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Next token is token VOID ()
Shifting token VOID ()
Entering state 4
Stack now 0 8 4
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 4 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 16
Stack now 0 8 4 16
Reading a token
Next token is token '(' ()
Shifting token '(' ()
Entering state 26
Stack now 0 8 4 16 26
Reading a token
Next token is token ')' ()
Shifting token ')' ()
Entering state 45
Stack now 0 8 4 16 26 45
Reducing stack by rule 21 (line 55):
   $1 = nterm identifier ()
   $2 = token '(' ()
   $3 = token ')' ()
-> $$ = nterm functiondeclarator ()
Entering state 17
Stack now 0 8 4 17
Reducing stack by rule 19 (line 51):
   $1 = token VOID ()
   $2 = nterm functiondeclarator ()
-> $$ = nterm functionheader ()
Entering state 13
Stack now 0 8 13
Reading a token
Next token is token '{' ()
Shifting token '{' ()
Entering state 23
Stack now 0 8 13 23
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 37 77
Reading a token
Next token is token '-' ()
Shifting token '-' ()
Entering state 56
Stack now 0 8 13 23 37 77 56
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 37 77 56 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 37 77 56 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 37 77 56 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 37 77 56 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 86
Stack now 0 8 13 23 37 77 56 86
Reducing stack by rule 53 (line 118):
   $1 = token '-' ()
   $2 = nterm unaryexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 40
Stack now 0 8 13 23 40
Reducing stack by rule 29 (line 75):
   $1 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 50
Stack now 0 8 13 23 39 37 77 50
Reducing stack by rule 4 (line 22):
   $1 = token NUMBER ()
-> $$ = nterm literal ()
Entering state 58
Stack now 0 8 13 23 39 37 77 58
Reducing stack by rule 44 (line 101):
   $1 = nterm literal ()
-> $$ = nterm primary ()
Entering state 60
Stack now 0 8 13 23 39 37 77 60
Reducing stack by rule 51 (line 114):
   $1 = nterm primary ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Reading a token
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 37
Stack now 0 8 13 23 39 37
Reading a token
Next token is token '=' ()
Shifting token '=' ()
Entering state 77
Stack now 0 8 13 23 39 37 77
Reading a token
Next token is token ID ()
Shifting token ID ()
Entering state 3
Stack now 0 8 13 23 39 37 77 3
Reducing stack by rule 16 (line 44):
   $1 = token ID ()
-> $$ = nterm identifier ()
Entering state 59
Stack now 0 8 13 23 39 37 77 59
Reading a token
Next token is token ';' ()
Reducing stack by rule 52 (line 115):
   $1 = nterm identifier ()
-> $$ = nterm postfixexpression ()
Entering state 62
Stack now 0 8 13 23 39 37 77 62
Reducing stack by rule 55 (line 120):
   $1 = nterm postfixexpression ()
-> $$ = nterm unaryexpression ()
Entering state 63
Stack now 0 8 13 23 39 37 77 63
Reducing stack by rule 56 (line 123):
   $1 = nterm unaryexpression ()
-> $$ = nterm multiplicativeexpression ()
Entering state 64
Stack now 0 8 13 23 39 37 77 64
Next token is token ';' ()
Reducing stack by rule 60 (line 129):
   $1 = nterm multiplicativeexpression ()
-> $$ = nterm additiveexpression ()
Entering state 65
Stack now 0 8 13 23 39 37 77 65
Next token is token ';' ()
Reducing stack by rule 63 (line 134):
   $1 = nterm additiveexpression ()
-> $$ = nterm relationalexpression ()
Entering state 66
Stack now 0 8 13 23 39 37 77 66
Next token is token ';' ()
Reducing stack by rule 68 (line 141):
   $1 = nterm relationalexpression ()
-> $$ = nterm equalityexpression ()
Entering state 67
Stack now 0 8 13 23 39 37 77 67
Next token is token ';' ()
Reducing stack by rule 71 (line 146):
   $1 = nterm equalityexpression ()
-> $$ = nterm conditionalandexpression ()
Entering state 68
Stack now 0 8 13 23 39 37 77 68
Next token is token ';' ()
Reducing stack by rule 73 (line 150):
   $1 = nterm conditionalandexpression ()
-> $$ = nterm conditionalorexpression ()
Entering state 69
Stack now 0 8 13 23 39 37 77 69
Next token is token ';' ()
Reducing stack by rule 75 (line 156):
   $1 = nterm conditionalorexpression ()
-> $$ = nterm assignmentexpression ()
Entering state 107
Stack now 0 8 13 23 39 37 77 107
Reducing stack by rule 77 (line 160):
   $1 = nterm identifier ()
   $2 = token '=' ()
   $3 = nterm assignmentexpression ()
-> $$ = nterm assignment ()
Entering state 44
Stack now 0 8 13 23 39 44
Reducing stack by rule 42 (line 97):
   $1 = nterm assignment ()
-> $$ = nterm statementexpression ()
Entering state 42
Stack now 0 8 13 23 39 42
Next token is token ';' ()
Shifting token ';' ()
Entering state 80
Stack now 0 8 13 23 39 42 80
Reducing stack by rule 35 (line 85):
   $1 = nterm statementexpression ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Entering state 41
Stack now 0 8 13 23 39 41
Reducing stack by rule 32 (line 80):
   $1 = nterm statement ()
-> $$ = nterm blockstatement ()
Entering state 79
Stack now 0 8 13 23 39 79
Reducing stack by rule 30 (line 76):
   $1 = nterm blockstatements ()
   $2 = nterm blockstatement ()
-> $$ = nterm blockstatements ()
Entering state 39
Stack now 0 8 13 23 39
Reading a token
Next token is token '}' ()
Shifting token '}' ()
Entering state 78
Stack now 0 8 13 23 39 78
Reducing stack by rule 27 (line 71):
   $1 = token '{' ()
   $2 = nterm blockstatements ()
   $3 = token '}' ()
-> $$ = nterm block ()
Entering state 24
Stack now 0 8 13 24
Reducing stack by rule 17 (line 47):
   $1 = nterm functionheader ()
   $2 = nterm block ()
-> $$ = nterm functiondeclaration ()
Entering state 12
Stack now 0 8 12
Reducing stack by rule 13 (line 37):
   $1 = nterm functiondeclaration ()
-> $$ = nterm globaldeclaration ()
Entering state 21
Stack now 0 8 21
Reducing stack by rule 11 (line 33):
   $1 = nterm globaldeclarations ()
   $2 = nterm globaldeclaration ()
-> $$ = nterm globaldeclarations ()
Entering state 8
Stack now 0 8
Reading a token
Now at end of input.
Reducing stack by rule 3 (line 19):
   $1 = nterm globaldeclarations ()
-> $$ = nterm start ()
Entering state 6
Stack now 0 6
Reducing stack by rule 1 (line 16):
   $1 = nterm start ()
EEEPROGRAM:
  MAINDECL:
    VOID:
    id { lineno: 5, attribute: "calculator" }
    FORMALS:
    BLOCK:
      STMTEXPR
        id { lineno: 7, attribute: "init" }
      STMTEXPR
        id { lineno: 8, attribute: "parser" }
  VARIABLEDECLARATION:
    boolean { lineno: 15 }
    id { lineno: 15, attribute: "_havechar" }
  VARIABLEDECLARATION:
    int { lineno: 16 }
    id { lineno: 16, attribute: "_char" }
  FUNCDEC: { lineno: 18 }
    BLOCK:
      IF:
        id { lineno: 20, attribute: "_havechar" }
        BLOCK:
          STMTEXPR
            = { lineno: 21 }
              id { lineno: 21, attribute: "_havechar" }
              false { lineno: 21 }
          return { lineno: 22 }
            id { lineno: 22, attribute: "_char" }
      return { lineno: 24 }
        id { lineno: 24, attribute: "getchar" }
  FUNCDEC: { lineno: 27 }
    id { lineno: 27, attribute: "ungetc" }
    FORMALS:
      FORMAL:
        int { lineno: 27 }
        id { lineno: 27, attribute: "ch" }
    BLOCK:
      IF:
        id { lineno: 29, attribute: "_havechar" }
        BLOCK:
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 30, attribute: "prints" }
              string { lineno: 30, attribute: "Internal error: too many ungets!\n" }
          STMTEXPR
            id { lineno: 31, attribute: "halt" }
      STMTEXPR
        = { lineno: 33 }
          id { lineno: 33, attribute: "_havechar" }
          true { lineno: 33 }
      STMTEXPR
        = { lineno: 34 }
          id { lineno: 34, attribute: "_char" }
          id { lineno: 34, attribute: "ch" }
  VARIABLEDECLARATION:
    boolean { lineno: 41 }
    id { lineno: 41, attribute: "_havetoken" }
  VARIABLEDECLARATION:
    int { lineno: 42 }
    id { lineno: 42, attribute: "_token" }
  VARIABLEDECLARATION:
    int { lineno: 43 }
    id { lineno: 43, attribute: "attr" }
  FUNCDEC: { lineno: 45 }
    BLOCK:
      IF:
        id { lineno: 47, attribute: "_havetoken" }
        return { lineno: 48 }
          id { lineno: 48, attribute: "_token" }
      STMTEXPR
        = { lineno: 50 }
          id { lineno: 50, attribute: "_havetoken" }
          true { lineno: 50 }
      return { lineno: 51 }
        = { lineno: 51 }
          id { lineno: 51, attribute: "_token" }
          id { lineno: 51, attribute: "scanner" }
  FUNCDEC: { lineno: 54 }
    id { lineno: 54, attribute: "match" }
    FORMALS:
      FORMAL:
        int { lineno: 54 }
        id { lineno: 54, attribute: "expect" }
    BLOCK:
      IF:
        !+ { lineno: 56 }
          id { lineno: 56, attribute: "peek" }
          id { lineno: 56, attribute: "expect" }
        BLOCK:
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 57, attribute: "prints" }
              string { lineno: 57, attribute: "rror: expected " }
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 58, attribute: "printc" }
              id { lineno: 58, attribute: "expect" }
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 59, attribute: "prints" }
              string { lineno: 59, attribute: "\n" }
          STMTEXPR
            id { lineno: 60, attribute: "halt" }
      STMTEXPR
        = { lineno: 62 }
          id { lineno: 62, attribute: "_havetoken" }
          false { lineno: 62 }
  FUNCDEC: { lineno: 65 }
    BLOCK:
      VARIABLEDECLARATION:
        int { lineno: 67 }
        id { lineno: 67, attribute: "ch" }
      WHILE:
        while { lineno: 69 }
        FUNCTIONINVOCATION:
          id { lineno: 69, attribute: "isspace" }
          = { lineno: 69 }
            id { lineno: 69, attribute: "ch" }
            id { lineno: 69, attribute: "getc" }
      IF:
        == { lineno: 72 }
          id { lineno: 72, attribute: "ch" }
          id { lineno: 72, attribute: "EOF" }
        return { lineno: 72 }
          id { lineno: 72, attribute: "TK_EOF" }
      IF:
        == { lineno: 73 }
          id { lineno: 73, attribute: "ch" }
          id { lineno: 73, attribute: "ASCII_NL" }
        return { lineno: 73 }
          id { lineno: 73, attribute: "TK_EOLN" }
      IF:
        == { lineno: 74 }
          id { lineno: 74, attribute: "ch" }
          id { lineno: 74, attribute: "ASCII_PLUS" }
        return { lineno: 74 }
          id { lineno: 74, attribute: "TK_ADD" }
      IF:
        == { lineno: 75 }
          id { lineno: 75, attribute: "ch" }
          id { lineno: 75, attribute: "ASCII_MINUS" }
        return { lineno: 75 }
          id { lineno: 75, attribute: "TK_SUB" }
      IF:
        == { lineno: 76 }
          id { lineno: 76, attribute: "ch" }
          id { lineno: 76, attribute: "ASCII_STAR" }
        return { lineno: 76 }
          id { lineno: 76, attribute: "TK_MUL" }
      IF:
        == { lineno: 77 }
          id { lineno: 77, attribute: "ch" }
          id { lineno: 77, attribute: "ASCII_SLASH" }
        return { lineno: 77 }
          id { lineno: 77, attribute: "TK_DIV" }
      IF:
        == { lineno: 78 }
          id { lineno: 78, attribute: "ch" }
          id { lineno: 78, attribute: "ASCII_LPAREN" }
        return { lineno: 78 }
          id { lineno: 78, attribute: "TK_LPAREN" }
      IF:
        == { lineno: 79 }
          id { lineno: 79, attribute: "ch" }
          id { lineno: 79, attribute: "ASCII_RPAREN" }
        return { lineno: 79 }
          id { lineno: 79, attribute: "TK_RPAREN" }
      IF:
        FUNCTIONINVOCATION:
          id { lineno: 81, attribute: "isdigit" }
          id { lineno: 81, attribute: "ch" }
        BLOCK:
          STMTEXPR
            = { lineno: 82 }
              id { lineno: 82, attribute: "attr" }
              number { lineno: 82, attribute: "0" }
          WHILE:
            while { lineno: 83 }
            FUNCTIONINVOCATION:
              id { lineno: 83, attribute: "isdigit" }
              id { lineno: 83, attribute: "ch" }
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 87, attribute: "ungetc" }
              id { lineno: 87, attribute: "ch" }
          return { lineno: 88 }
            id { lineno: 88, attribute: "TK_NUMBER" }
      STMTEXPR
        FUNCTIONINVOCATION:
          id { lineno: 91, attribute: "prints" }
          string { lineno: 91, attribute: "rror: invalid character.\n" }
      STMTEXPR
        id { lineno: 92, attribute: "halt" }
  FUNCDEC: { lineno: 95 }
    id { lineno: 95, attribute: "isdigit" }
    FORMALS:
      FORMAL:
        int { lineno: 95 }
        id { lineno: 95, attribute: "ch" }
    BLOCK:
      return { lineno: 97 }
        && { lineno: 97 }
          >= { lineno: 97 }
            id { lineno: 97, attribute: "ch" }
            id { lineno: 97, attribute: "ASCII_0" }
          <= { lineno: 97 }
            id { lineno: 97, attribute: "ch" }
            id { lineno: 97, attribute: "ASCII_9" }
  FUNCDEC: { lineno: 100 }
    id { lineno: 100, attribute: "isspace" }
    FORMALS:
      FORMAL:
        int { lineno: 100 }
        id { lineno: 100, attribute: "ch" }
    BLOCK:
      return { lineno: 102 }
        || { lineno: 103 }
          || { lineno: 102 }
            == { lineno: 102 }
              id { lineno: 102, attribute: "ch" }
              id { lineno: 102, attribute: "ASCII_SPACE" }
            == { lineno: 103 }
              id { lineno: 103, attribute: "ch" }
              id { lineno: 103, attribute: "ASCII_TAB" }
          == { lineno: 104 }
            id { lineno: 104, attribute: "ch" }
            id { lineno: 104, attribute: "ASCII_CR" }
  FUNCDEC: { lineno: 111 }
    BLOCK:
      VARIABLEDECLARATION:
        int { lineno: 113 }
        id { lineno: 113, attribute: "result" }
      WHILE:
        while { lineno: 115 }
        !+ { lineno: 115 }
          id { lineno: 115, attribute: "peek" }
          id { lineno: 115, attribute: "TK_EOF" }
  FUNCDEC: { lineno: 125 }
    BLOCK:
      VARIABLEDECLARATION:
        int { lineno: 127 }
        id { lineno: 127, attribute: "l" }
      VARIABLEDECLARATION:
        int { lineno: 128 }
        id { lineno: 128, attribute: "r" }
      VARIABLEDECLARATION:
        int { lineno: 129 }
        id { lineno: 129, attribute: "token" }
      STMTEXPR
        = { lineno: 131 }
          id { lineno: 131, attribute: "l" }
          id { lineno: 131, attribute: "T" }
      WHILE:
        while { lineno: 132 }
        || { lineno: 132 }
          == { lineno: 132 }
            id { lineno: 132, attribute: "peek" }
            id { lineno: 132, attribute: "TK_ADD" }
          == { lineno: 132 }
            id { lineno: 132, attribute: "peek" }
            id { lineno: 132, attribute: "TK_SUB" }
      return { lineno: 141 }
        id { lineno: 141, attribute: "l" }
  FUNCDEC: { lineno: 144 }
    BLOCK:
      VARIABLEDECLARATION:
        int { lineno: 146 }
        id { lineno: 146, attribute: "l" }
      VARIABLEDECLARATION:
        int { lineno: 147 }
        id { lineno: 147, attribute: "r" }
      VARIABLEDECLARATION:
        int { lineno: 148 }
        id { lineno: 148, attribute: "token" }
      STMTEXPR
        = { lineno: 150 }
          id { lineno: 150, attribute: "l" }
          id { lineno: 150, attribute: "F" }
      WHILE:
        while { lineno: 151 }
        || { lineno: 151 }
          == { lineno: 151 }
            id { lineno: 151, attribute: "peek" }
            id { lineno: 151, attribute: "TK_MUL" }
          == { lineno: 151 }
            id { lineno: 151, attribute: "peek" }
            id { lineno: 151, attribute: "TK_DIV" }
      return { lineno: 160 }
        id { lineno: 160, attribute: "l" }
  FUNCDEC: { lineno: 163 }
    BLOCK:
      VARIABLEDECLARATION:
        int { lineno: 165 }
        id { lineno: 165, attribute: "result" }
      VARIABLEDECLARATION:
        int { lineno: 167 }
        id { lineno: 167, attribute: "token" }
      STMTEXPR
        = { lineno: 168 }
          id { lineno: 168, attribute: "token" }
          id { lineno: 168, attribute: "peek" }
      IF_ELSE:
        == { lineno: 170 }
          id { lineno: 170, attribute: "token" }
          id { lineno: 170, attribute: "TK_LPAREN" }
        BLOCK:
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 171, attribute: "match" }
              id { lineno: 171, attribute: "TK_LPAREN" }
          STMTEXPR
            = { lineno: 172 }
              id { lineno: 172, attribute: "result" }
              id { lineno: 172, attribute: "E" }
          STMTEXPR
            FUNCTIONINVOCATION:
              id { lineno: 173, attribute: "match" }
              id { lineno: 173, attribute: "TK_RPAREN" }
        IF_ELSE:
          == { lineno: 175 }
            id { lineno: 175, attribute: "token" }
            id { lineno: 175, attribute: "TK_SUB" }
          BLOCK:
            STMTEXPR
              FUNCTIONINVOCATION:
                id { lineno: 176, attribute: "match" }
                id { lineno: 176, attribute: "TK_SUB" }
            STMTEXPR
              = { lineno: 177 }
                id { lineno: 177, attribute: "result" }
                - { lineno: 177 }
                  id { lineno: 177, attribute: "F" }
          IF_ELSE:
            == { lineno: 179 }
              id { lineno: 179, attribute: "token" }
              id { lineno: 179, attribute: "TK_NUMBER" }
            BLOCK:
              STMTEXPR
                FUNCTIONINVOCATION:
                  id { lineno: 180, attribute: "match" }
                  id { lineno: 180, attribute: "TK_NUMBER" }
              STMTEXPR
                = { lineno: 181 }
                  id { lineno: 181, attribute: "result" }
                  id { lineno: 181, attribute: "attr" }
            BLOCK:
              STMTEXPR
                FUNCTIONINVOCATION:
                  id { lineno: 184, attribute: "prints" }
                  string { lineno: 184, attribute: "rror: expected factor.\n" }
              STMTEXPR
                id { lineno: 185, attribute: "halt" }
      return { lineno: 187 }
        id { lineno: 187, attribute: "result" }
  VARIABLEDECLARATION:
    int { lineno: 194 }
    id { lineno: 194, attribute: "EOF" }
  VARIABLEDECLARATION:
    int { lineno: 196 }
    id { lineno: 196, attribute: "TK_EOF" }
  VARIABLEDECLARATION:
    int { lineno: 197 }
    id { lineno: 197, attribute: "TK_EOLN" }
  VARIABLEDECLARATION:
    int { lineno: 198 }
    id { lineno: 198, attribute: "TK_NUMBER" }
  VARIABLEDECLARATION:
    int { lineno: 199 }
    id { lineno: 199, attribute: "TK_ADD" }
  VARIABLEDECLARATION:
    int { lineno: 200 }
    id { lineno: 200, attribute: "TK_SUB" }
  VARIABLEDECLARATION:
    int { lineno: 201 }
    id { lineno: 201, attribute: "TK_MUL" }
  VARIABLEDECLARATION:
    int { lineno: 202 }
    id { lineno: 202, attribute: "TK_DIV" }
  VARIABLEDECLARATION:
    int { lineno: 203 }
    id { lineno: 203, attribute: "TK_LPAREN" }
  VARIABLEDECLARATION:
    int { lineno: 204 }
    id { lineno: 204, attribute: "TK_RPAREN" }
  VARIABLEDECLARATION:
    int { lineno: 206 }
    id { lineno: 206, attribute: "ASCII_0" }
  VARIABLEDECLARATION:
    int { lineno: 207 }
    id { lineno: 207, attribute: "ASCII_9" }
  VARIABLEDECLARATION:
    int { lineno: 208 }
    id { lineno: 208, attribute: "ASCII_PLUS" }
  VARIABLEDECLARATION:
    int { lineno: 209 }
    id { lineno: 209, attribute: "ASCII_MINUS" }
  VARIABLEDECLARATION:
    int { lineno: 210 }
    id { lineno: 210, attribute: "ASCII_STAR" }
  VARIABLEDECLARATION:
    int { lineno: 211 }
    id { lineno: 211, attribute: "ASCII_SLASH" }
  VARIABLEDECLARATION:
    int { lineno: 212 }
    id { lineno: 212, attribute: "ASCII_LPAREN" }
  VARIABLEDECLARATION:
    int { lineno: 213 }
    id { lineno: 213, attribute: "ASCII_RPAREN" }
  VARIABLEDECLARATION:
    int { lineno: 214 }
    id { lineno: 214, attribute: "ASCII_SPACE" }
  VARIABLEDECLARATION:
    int { lineno: 215 }
    id { lineno: 215, attribute: "ASCII_TAB" }
  VARIABLEDECLARATION:
    int { lineno: 216 }
    id { lineno: 216, attribute: "ASCII_CR" }
  VARIABLEDECLARATION:
    int { lineno: 217 }
    id { lineno: 217, attribute: "ASCII_NL" }
  FUNCDEC: { lineno: 219 }
    BLOCK:
      STMTEXPR
        = { lineno: 221 }
          id { lineno: 221, attribute: "EOF" }
          - { lineno: 221 }
            number { lineno: 221, attribute: "1" }
      STMTEXPR
        = { lineno: 223 }
          id { lineno: 223, attribute: "ASCII_0" }
          number { lineno: 223, attribute: "48" }
      STMTEXPR
        = { lineno: 224 }
          id { lineno: 224, attribute: "ASCII_9" }
          number { lineno: 224, attribute: "57" }
      STMTEXPR
        = { lineno: 225 }
          id { lineno: 225, attribute: "ASCII_PLUS" }
          number { lineno: 225, attribute: "43" }
      STMTEXPR
        = { lineno: 226 }
          id { lineno: 226, attribute: "ASCII_MINUS" }
          number { lineno: 226, attribute: "45" }
      STMTEXPR
        = { lineno: 227 }
          id { lineno: 227, attribute: "ASCII_STAR" }
          number { lineno: 227, attribute: "42" }
      STMTEXPR
        = { lineno: 228 }
          id { lineno: 228, attribute: "ASCII_SLASH" }
          number { lineno: 228, attribute: "47" }
      STMTEXPR
        = { lineno: 229 }
          id { lineno: 229, attribute: "ASCII_LPAREN" }
          number { lineno: 229, attribute: "40" }
      STMTEXPR
        = { lineno: 230 }
          id { lineno: 230, attribute: "ASCII_RPAREN" }
          number { lineno: 230, attribute: "41" }
      STMTEXPR
        = { lineno: 231 }
          id { lineno: 231, attribute: "ASCII_SPACE" }
          number { lineno: 231, attribute: "32" }
      STMTEXPR
        = { lineno: 232 }
          id { lineno: 232, attribute: "ASCII_TAB" }
          number { lineno: 232, attribute: "9" }
      STMTEXPR
        = { lineno: 233 }
          id { lineno: 233, attribute: "ASCII_CR" }
          number { lineno: 233, attribute: "13" }
      STMTEXPR
        = { lineno: 234 }
          id { lineno: 234, attribute: "ASCII_NL" }
          number { lineno: 234, attribute: "10" }
      STMTEXPR
        = { lineno: 236 }
          id { lineno: 236, attribute: "TK_EOF" }
          number { lineno: 236, attribute: "256" }
      STMTEXPR
        = { lineno: 237 }
          id { lineno: 237, attribute: "TK_NUMBER" }
          number { lineno: 237, attribute: "257" }
      STMTEXPR
        = { lineno: 238 }
          id { lineno: 238, attribute: "TK_ADD" }
          id { line-> $$ = nterm dummy_start ()
Entering state 5
Stack now 0 5
Now at end of input.
Shifting token "end of file" ()
Entering state 18
Stack now 0 5 18
Stack now 0 5 18
Cleanup: popping token "end of file" ()
Cleanup: popping nterm dummy_start ()
no: 238, attribute: "ASCII_PLUS" }
      STMTEXPR
        = { lineno: 239 }
          id { lineno: 239, attribute: "TK_SUB" }
          id { lineno: 239, attribute: "ASCII_MINUS" }
      STMTEXPR
        = { lineno: 240 }
          id { lineno: 240, attribute: "TK_MUL" }
          id { lineno: 240, attribute: "ASCII_STAR" }
      STMTEXPR
        = { lineno: 241 }
          id { lineno: 241, attribute: "TK_DIV" }
          id { lineno: 241, attribute: "ASCII_SLASH" }
      STMTEXPR
        = { lineno: 242 }
          id { lineno: 242, attribute: "TK_LPAREN" }
          id { lineno: 242, attribute: "ASCII_LPAREN" }
      STMTEXPR
        = { lineno: 243 }
          id { lineno: 243, attribute: "TK_RPAREN" }
          id { lineno: 243, attribute: "ASCII_RPAREN" }
      STMTEXPR
        = { lineno: 244 }
          id { lineno: 244, attribute: "TK_EOLN" }
          id { lineno: 244, attribute: "ASCII_NL" }
